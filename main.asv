% housekeeping
clear
clc
close all

% gobal variables
colors = {'Blue'; 'Green'; 'Red'; 'Yellow'};
threshold = 0.3;
search_radii = [20, 35];

% make sure that no camera object exists (from a previous run)
if exist('vid', 'var')
    stop(cam)
end

% create a video object for matlab to get images from
cam = videoinput('winvideo', 1, 'MJPG_640x480');

% get and save the background image
gamestate.bkgd_image = double(getsnapshot(cam));
gamestate.bkgd_image = gamestate.bkgd_image ./ max(max(gamestate.bkgd_image));

% main loop
while true
    % prompt the user to figure out what color we want to search for
    gamestate.color = listdlg('ListString', colors);
    
    % get the new image frame
    gamestate.image = double(getsnapshot(cam));
    gamestate.image = gamestate.image ./ max(max(gamestate.image));
    
    % background subtraction
    gamestate.d_image = abs(gamestate.image - gamestate.bkgd_image);
    
    % form a windowing matrix
    gamestate.window = medfilt2(sum(gamestate.d_image, 3) > threshold * 3);
    gamestate.window = repmat(gamestate.window, 1, 1, 3);
    
    % window the original image
    gamestate.filtered_image = gamestate.image .* gamestate.window;
    
    % search for positions in the ring
    [centers, radii] = imfindcircles(gamestate.filtered_image, search_radii);
    
    % get the pixel colors
    if ~isempty(centers)
        % length of centers:
        len = length(centers(:, 1));
        
        rgb_colors = zeros(len, 3);
        
        % grab each pixel and the color values
        for c = 1:len
            point = round(centers(c, :));
            
            % get the color for this center point. I tried doing this in one
            % line; it broke spectacularly
            rgb_colors(c, 1) = data(point(2), point(1), 1);
            rgb_colors(c, 2) = data(point(2), point(1), 2);
            rgb_colors(c, 3) = data(point(2), point(1), 3);
        end
        
        for n = 1:len
            colors(n) = classify(rgb_colors(n,1), rgb_colors(n,2), rgb_colors(n,3));
        end

        % calculate center of circle's degrees from x-axis 
        angles = atan2d(-(centers(:, 2) - 240), centers(:, 1) - 320);

        % save the circles in the gamestate
        gamestate.circles = [colors, mod(angles, 360), centers];
    end
    
    % show the image to the screen
    imshow(gamestate.filtered_image, [0.0, 1.0]);
    viscircles(centers, radii, 'EdgeColor', 'm');
end